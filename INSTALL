MorphoDiTa Installation


Pre-compiled binaries and models are available from LINDAT-Clarin
(http://www.lindat.cz) infrastructure.

To use the MorphoDiTa library, either in C++ or other languages, it must be
compiled manually. The sources are available either at LINDAT-Clarin
(http://www.lindat.cz) or in the GitHub repository
(https://github.com/ufal/morphodita).


Requirements
============

- G++ 4.7 or newer
- make
- SWIG 1.3+ for language bindings other than C++


Compilation
===========

To compile MorphoDiTa on Unix-like systems, run make in the src directory.

Make targets and options:

- exe: compile the binaries (default)
- lib: compile the library
- BITS=32, BITS=64: compile for specified 32-bit or 64-bit architecture instead
  of the default one
- RELEASE=1: turn off assertions and use LTO
- PROFILE=1: turn on profiling
- DEBUG=1: compile with debug informations and C++ library debugging


Windows
-------

Currently only G++ is supported under Windows. We use TDM-GCC
(http://tdm-gcc.tdragon.net/) for producing Windows builds, but MinGW and Cygwin
are also known to work. If you are interested in adding support for other
compilers (most notably, Visual Studio), let us know.

By default, Unix-like shell is required (i.e., Cygwin or MSYS). If you use
standard Windows Cmd.exe (i.e., TDM-GCC or plain MinGW), use

  make WINCMD=1

Note that make in MinGW is usually distributed as mingw32-make.


Other language bindings
=======================


Java
----

To compile Java bindings, run make in the bindings/java directory, optionally
with the described Make options.

The Java installation specified in the environment variable JAVA_HOME is used.
If the environment variable does not exist, the JAVA_HOME can be specified using

  make JAVA_HOME=path_to_Java_installation

Java 6 and newer is supported.


Python
------

To compile Python bindings, run make in the bindings/python directory,
optionally with the described Make options.

Path to the include headers of the required Python version must be specified in
the PYTHON_INCLUDE variable using

  make PYTHON_INCLUDE=path_to_Python_includes

Both Python 2.6+ and Python 3+ are supported.

