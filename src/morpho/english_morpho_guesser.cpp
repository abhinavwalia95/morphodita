// This file is part of MorphoDiTa.
//
// Copyright 2013 by Institute of Formal and Applied Linguistics, Faculty of
// Mathematics and Physics, Charles University in Prague, Czech Republic.
//
// MorphoDiTa is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// MorphoDiTa is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with MorphoDiTa.  If not, see <http://www.gnu.org/licenses/>.

#include "english_morpho_guesser.h"

namespace ufal {
namespace morphodita {

void english_morpho_guesser::load(binary_decoder& data) {
  negations.load(data);
}


static const short _tag_guesser_key_offsets[] = {
	0, 23, 39, 51, 60, 69, 80, 89, 
	99, 109, 118, 129, 138, 147, 157, 166, 
	178, 187, 196, 206, 215, 225, 235, 244, 
	254, 263, 272, 281, 290, 300, 310, 317, 
	324, 332, 339, 347, 355, 363, 370, 377, 
	384, 392, 402, 412, 422, 431, 441, 451, 
	460, 469, 479, 489, 498, 507, 518, 527, 
	537, 547, 556, 567, 576, 586, 595, 607, 
	617, 626, 635, 644, 654, 664, 673, 683, 
	693, 703, 713, 723, 733, 742, 752, 764, 
	778, 790, 803, 816, 828, 842, 854, 866, 
	879, 891, 905, 917, 929, 941, 954, 966, 
	979, 991, 1004, 1016, 1029, 1041, 1054, 1071, 
	1089, 1107, 1124, 1139, 1154, 1171, 1186, 1202, 
	1218, 1233, 1250, 1265, 1280, 1296, 1311, 1329, 
	1345, 1360, 1375, 1391, 1407, 1423, 1439, 1455, 
	1471, 1487, 1502, 1518, 1534, 1550, 1568, 1584, 
	1601, 1618, 1634, 1652, 1668, 1684, 1701, 1717, 
	1735, 1751, 1767, 1783, 1800, 1816, 1833, 1849, 
	1866, 1882, 1899, 1915, 1932, 1954, 1977, 2000
};

static const char _tag_guesser_trans_keys[] = {
	39, 45, 46, 97, 98, 101, 105, 108, 
	109, 111, 115, 117, 118, 120, 121, 48, 
	57, 65, 90, 99, 100, 102, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 101, 105, 108, 
	109, 111, 115, 117, 121, 97, 100, 101, 
	105, 108, 109, 111, 114, 115, 117, 121, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 110, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	110, 111, 115, 117, 121, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 100, 
	101, 105, 108, 109, 111, 114, 115, 117, 
	121, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 114, 115, 117, 121, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 45, 97, 
	100, 101, 105, 108, 109, 111, 114, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 100, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 97, 
	101, 105, 108, 109, 110, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 110, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 100, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 116, 117, 121, 45, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	105, 111, 115, 117, 121, 97, 101, 105, 
	111, 115, 117, 121, 97, 100, 101, 105, 
	111, 115, 117, 121, 97, 101, 105, 111, 
	115, 117, 121, 97, 101, 105, 110, 111, 
	115, 117, 121, 97, 101, 105, 110, 111, 
	115, 117, 121, 97, 101, 103, 105, 111, 
	115, 117, 121, 97, 101, 105, 111, 115, 
	117, 121, 97, 101, 105, 111, 115, 117, 
	121, 97, 101, 105, 111, 115, 117, 121, 
	97, 101, 103, 105, 111, 115, 117, 121, 
	97, 101, 105, 108, 109, 111, 115, 116, 
	117, 121, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 101, 103, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 97, 
	101, 103, 105, 108, 109, 111, 115, 117, 
	121, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 101, 105, 108, 
	109, 111, 115, 117, 121, 97, 101, 105, 
	108, 109, 111, 115, 116, 117, 121, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 100, 101, 105, 108, 
	109, 111, 114, 115, 117, 121, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 97, 
	101, 105, 108, 109, 110, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 110, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 97, 100, 101, 105, 
	108, 109, 111, 114, 115, 117, 121, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	97, 101, 105, 108, 109, 111, 114, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 45, 97, 100, 101, 105, 
	108, 109, 111, 114, 115, 117, 121, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 45, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	103, 105, 108, 109, 111, 115, 117, 121, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 97, 101, 103, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 105, 108, 109, 
	111, 115, 116, 117, 121, 45, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 97, 
	101, 105, 108, 109, 111, 115, 116, 117, 
	121, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 97, 101, 103, 105, 108, 
	109, 111, 115, 117, 121, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 97, 101, 
	103, 105, 108, 109, 111, 115, 117, 121, 
	45, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 45, 97, 100, 101, 
	105, 108, 109, 111, 114, 115, 117, 121, 
	48, 57, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 45, 97, 
	101, 105, 108, 109, 110, 111, 115, 117, 
	121, 48, 57, 45, 97, 101, 105, 108, 
	109, 110, 111, 115, 117, 121, 48, 57, 
	45, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 45, 97, 100, 101, 
	105, 108, 109, 111, 114, 115, 117, 121, 
	48, 57, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 45, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	48, 57, 45, 97, 101, 105, 108, 109, 
	111, 114, 115, 117, 121, 48, 57, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 45, 97, 100, 101, 105, 
	108, 109, 111, 114, 115, 117, 121, 48, 
	57, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 45, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 48, 
	57, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 45, 97, 101, 
	105, 108, 109, 111, 115, 116, 117, 121, 
	48, 57, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 45, 97, 
	101, 105, 108, 109, 111, 115, 116, 117, 
	121, 48, 57, 45, 97, 101, 105, 108, 
	109, 111, 115, 117, 121, 48, 57, 45, 
	97, 101, 105, 108, 109, 111, 115, 116, 
	117, 121, 48, 57, 45, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 48, 57, 
	45, 97, 101, 103, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 45, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 48, 
	57, 45, 97, 101, 103, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 45, 46, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	118, 120, 121, 48, 57, 99, 100, 45, 
	46, 97, 101, 105, 108, 109, 110, 111, 
	115, 117, 118, 120, 121, 48, 57, 99, 
	100, 45, 46, 97, 101, 105, 108, 109, 
	110, 111, 115, 117, 118, 120, 121, 48, 
	57, 99, 100, 45, 46, 97, 101, 105, 
	108, 109, 111, 115, 117, 118, 120, 121, 
	48, 57, 99, 100, 97, 101, 105, 108, 
	109, 111, 115, 117, 121, 48, 57, 65, 
	90, 98, 122, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 97, 100, 101, 105, 108, 109, 
	111, 114, 115, 117, 121, 48, 57, 65, 
	90, 98, 122, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 97, 101, 105, 108, 109, 110, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 97, 101, 105, 108, 109, 110, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 97, 100, 101, 105, 108, 109, 111, 
	114, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	97, 101, 105, 108, 109, 111, 114, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 100, 101, 105, 108, 109, 111, 114, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 97, 
	101, 105, 108, 109, 111, 115, 116, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 97, 
	101, 105, 108, 109, 111, 115, 116, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 97, 
	101, 105, 108, 109, 111, 115, 116, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 97, 
	101, 103, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	48, 57, 65, 90, 98, 122, 97, 101, 
	103, 105, 108, 109, 111, 115, 117, 121, 
	48, 57, 65, 90, 98, 122, 45, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	48, 57, 65, 90, 98, 122, 45, 97, 
	101, 105, 108, 109, 111, 115, 117, 121, 
	48, 57, 65, 90, 98, 122, 45, 97, 
	100, 101, 105, 108, 109, 111, 114, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	45, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	45, 97, 101, 105, 108, 109, 110, 111, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 45, 97, 101, 105, 108, 109, 110, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 45, 97, 100, 101, 105, 108, 
	109, 111, 114, 115, 117, 121, 48, 57, 
	65, 90, 98, 122, 45, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 48, 57, 
	65, 90, 98, 122, 45, 97, 101, 105, 
	108, 109, 111, 115, 117, 121, 48, 57, 
	65, 90, 98, 122, 45, 97, 101, 105, 
	108, 109, 111, 114, 115, 117, 121, 48, 
	57, 65, 90, 98, 122, 45, 97, 101, 
	105, 108, 109, 111, 115, 117, 121, 48, 
	57, 65, 90, 98, 122, 45, 97, 100, 
	101, 105, 108, 109, 111, 114, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 117, 
	121, 48, 57, 65, 90, 98, 122, 45, 
	97, 101, 105, 108, 109, 111, 115, 116, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	45, 97, 101, 105, 108, 109, 111, 115, 
	117, 121, 48, 57, 65, 90, 98, 122, 
	45, 97, 101, 105, 108, 109, 111, 115, 
	116, 117, 121, 48, 57, 65, 90, 98, 
	122, 45, 97, 101, 105, 108, 109, 111, 
	115, 117, 121, 48, 57, 65, 90, 98, 
	122, 45, 97, 101, 105, 108, 109, 111, 
	115, 116, 117, 121, 48, 57, 65, 90, 
	98, 122, 45, 97, 101, 105, 108, 109, 
	111, 115, 117, 121, 48, 57, 65, 90, 
	98, 122, 45, 97, 101, 103, 105, 108, 
	109, 111, 115, 117, 121, 48, 57, 65, 
	90, 98, 122, 45, 97, 101, 105, 108, 
	109, 111, 115, 117, 121, 48, 57, 65, 
	90, 98, 122, 45, 97, 101, 103, 105, 
	108, 109, 111, 115, 117, 121, 48, 57, 
	65, 90, 98, 122, 45, 46, 97, 98, 
	101, 105, 108, 109, 111, 115, 117, 118, 
	120, 121, 48, 57, 65, 90, 99, 100, 
	102, 122, 45, 46, 97, 98, 101, 105, 
	108, 109, 110, 111, 115, 117, 118, 120, 
	121, 48, 57, 65, 90, 99, 100, 102, 
	122, 45, 46, 97, 98, 101, 105, 108, 
	109, 110, 111, 115, 117, 118, 120, 121, 
	48, 57, 65, 90, 99, 100, 102, 122, 
	45, 46, 97, 98, 101, 105, 108, 109, 
	111, 115, 117, 118, 120, 121, 48, 57, 
	65, 90, 99, 100, 102, 122, 0
};

static const char _tag_guesser_single_lengths[] = {
	15, 10, 10, 9, 9, 11, 9, 10, 
	10, 9, 11, 9, 9, 10, 9, 12, 
	9, 9, 10, 9, 10, 10, 9, 10, 
	9, 9, 9, 9, 10, 10, 7, 7, 
	8, 7, 8, 8, 8, 7, 7, 7, 
	8, 10, 10, 10, 9, 10, 10, 9, 
	9, 10, 10, 9, 9, 11, 9, 10, 
	10, 9, 11, 9, 10, 9, 12, 10, 
	9, 9, 9, 10, 10, 9, 10, 10, 
	10, 10, 10, 10, 9, 10, 10, 12, 
	10, 11, 11, 10, 12, 10, 10, 11, 
	10, 12, 10, 10, 10, 11, 10, 11, 
	10, 11, 10, 11, 10, 11, 13, 14, 
	14, 13, 9, 9, 11, 9, 10, 10, 
	9, 11, 9, 9, 10, 9, 12, 10, 
	9, 9, 10, 10, 10, 10, 10, 10, 
	10, 9, 10, 10, 10, 12, 10, 11, 
	11, 10, 12, 10, 10, 11, 10, 12, 
	10, 10, 10, 11, 10, 11, 10, 11, 
	10, 11, 10, 11, 14, 15, 15, 14
};

static const char _tag_guesser_range_lengths[] = {
	4, 3, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 4, 4, 4, 4
};

static const short _tag_guesser_index_offsets[] = {
	0, 20, 34, 46, 56, 66, 78, 88, 
	99, 110, 120, 132, 142, 152, 163, 173, 
	186, 196, 206, 217, 227, 238, 249, 259, 
	270, 280, 290, 300, 310, 321, 332, 340, 
	348, 357, 365, 374, 383, 392, 400, 408, 
	416, 425, 436, 447, 458, 468, 479, 490, 
	500, 510, 521, 532, 542, 552, 564, 574, 
	585, 596, 606, 618, 628, 639, 649, 662, 
	673, 683, 693, 703, 714, 725, 735, 746, 
	757, 768, 779, 790, 801, 811, 822, 834, 
	848, 860, 873, 886, 898, 912, 924, 936, 
	949, 961, 975, 987, 999, 1011, 1024, 1036, 
	1049, 1061, 1074, 1086, 1099, 1111, 1124, 1140, 
	1157, 1174, 1190, 1203, 1216, 1231, 1244, 1258, 
	1272, 1285, 1300, 1313, 1326, 1340, 1353, 1369, 
	1383, 1396, 1409, 1423, 1437, 1451, 1465, 1479, 
	1493, 1507, 1520, 1534, 1548, 1562, 1578, 1592, 
	1607, 1622, 1636, 1652, 1666, 1680, 1695, 1709, 
	1725, 1739, 1753, 1767, 1782, 1796, 1811, 1825, 
	1840, 1854, 1869, 1883, 1898, 1917, 1937, 1957
};

static const unsigned char _tag_guesser_indicies[] = {
	1, 2, 3, 6, 5, 8, 9, 10, 
	11, 6, 12, 6, 7, 7, 6, 4, 
	5, 7, 5, 0, 2, 6, 8, 14, 
	10, 15, 6, 16, 6, 6, 13, 5, 
	5, 0, 2, 17, 18, 19, 20, 21, 
	17, 22, 17, 17, 2, 0, 23, 24, 
	25, 26, 27, 23, 28, 23, 23, 2, 
	23, 24, 29, 26, 27, 23, 28, 23, 
	23, 2, 23, 30, 24, 29, 26, 27, 
	23, 31, 32, 23, 23, 2, 23, 24, 
	25, 26, 27, 23, 28, 23, 23, 2, 
	23, 24, 29, 26, 27, 33, 23, 28, 
	23, 23, 2, 23, 24, 29, 26, 27, 
	34, 23, 28, 23, 23, 2, 23, 35, 
	25, 26, 27, 23, 28, 23, 23, 2, 
	36, 30, 24, 29, 26, 27, 23, 31, 
	37, 23, 23, 2, 23, 24, 29, 26, 
	27, 23, 38, 23, 23, 2, 23, 24, 
	25, 26, 27, 39, 28, 23, 23, 2, 
	23, 24, 29, 26, 27, 23, 40, 38, 
	23, 23, 2, 23, 41, 25, 26, 27, 
	23, 28, 23, 23, 2, 42, 23, 30, 
	24, 29, 26, 27, 23, 31, 32, 23, 
	23, 2, 43, 44, 45, 46, 47, 43, 
	48, 43, 43, 42, 43, 44, 49, 46, 
	47, 43, 48, 43, 43, 42, 43, 50, 
	44, 49, 46, 47, 43, 51, 43, 43, 
	42, 43, 44, 45, 46, 47, 43, 48, 
	43, 43, 42, 43, 44, 49, 46, 47, 
	52, 43, 48, 43, 43, 42, 43, 44, 
	49, 46, 47, 53, 43, 48, 43, 43, 
	42, 43, 54, 45, 46, 47, 43, 48, 
	43, 43, 42, 55, 50, 44, 49, 46, 
	47, 43, 51, 43, 43, 42, 43, 44, 
	49, 46, 47, 43, 56, 43, 43, 42, 
	43, 44, 45, 46, 47, 55, 48, 43, 
	43, 42, 43, 44, 45, 46, 47, 43, 
	57, 43, 43, 42, 43, 44, 45, 46, 
	47, 43, 57, 43, 43, 42, 43, 44, 
	45, 46, 47, 43, 57, 58, 43, 43, 
	42, 59, 43, 44, 45, 46, 47, 43, 
	48, 43, 43, 42, 60, 61, 62, 60, 
	63, 60, 60, 59, 60, 61, 64, 60, 
	63, 60, 60, 59, 60, 65, 61, 64, 
	60, 63, 60, 60, 59, 60, 61, 62, 
	60, 63, 60, 60, 59, 60, 61, 64, 
	66, 60, 63, 60, 60, 59, 60, 61, 
	64, 67, 60, 63, 60, 60, 59, 60, 
	61, 68, 62, 60, 63, 60, 60, 59, 
	60, 61, 62, 60, 63, 60, 60, 59, 
	60, 61, 62, 60, 69, 60, 60, 59, 
	60, 61, 62, 60, 69, 60, 60, 59, 
	60, 61, 68, 62, 60, 63, 60, 60, 
	59, 43, 44, 45, 46, 47, 43, 57, 
	70, 43, 43, 42, 59, 43, 44, 45, 
	46, 47, 43, 48, 43, 43, 42, 43, 
	44, 71, 45, 46, 47, 43, 48, 43, 
	43, 42, 43, 44, 45, 46, 47, 43, 
	48, 43, 43, 42, 43, 44, 71, 45, 
	46, 47, 43, 48, 43, 43, 42, 42, 
	23, 24, 25, 26, 27, 23, 28, 23, 
	23, 2, 23, 24, 25, 26, 27, 23, 
	72, 23, 23, 2, 23, 24, 25, 26, 
	27, 23, 72, 23, 23, 2, 23, 24, 
	25, 26, 27, 23, 72, 73, 23, 23, 
	2, 74, 23, 24, 25, 26, 27, 23, 
	28, 23, 23, 2, 75, 76, 77, 78, 
	79, 75, 80, 75, 75, 74, 75, 76, 
	81, 78, 79, 75, 80, 75, 75, 74, 
	75, 82, 76, 81, 78, 79, 75, 83, 
	80, 75, 75, 74, 75, 76, 77, 78, 
	79, 75, 80, 75, 75, 74, 75, 76, 
	81, 78, 79, 84, 75, 80, 75, 75, 
	74, 75, 76, 81, 78, 79, 85, 75, 
	80, 75, 75, 74, 75, 86, 77, 78, 
	79, 75, 80, 75, 75, 74, 75, 82, 
	76, 81, 78, 79, 75, 83, 87, 75, 
	75, 74, 75, 76, 77, 78, 79, 88, 
	80, 75, 75, 74, 75, 76, 81, 78, 
	79, 75, 89, 80, 75, 75, 74, 75, 
	90, 77, 78, 79, 75, 80, 75, 75, 
	74, 59, 75, 82, 76, 81, 78, 79, 
	75, 83, 80, 75, 75, 74, 59, 75, 
	76, 77, 78, 79, 75, 80, 75, 75, 
	74, 75, 76, 77, 78, 79, 75, 91, 
	75, 75, 74, 75, 76, 77, 78, 79, 
	75, 91, 75, 75, 74, 75, 76, 77, 
	78, 79, 75, 92, 75, 75, 74, 59, 
	75, 76, 77, 78, 79, 75, 91, 75, 
	75, 74, 75, 76, 93, 77, 78, 79, 
	75, 80, 75, 75, 74, 75, 76, 77, 
	78, 79, 75, 80, 75, 75, 74, 75, 
	76, 93, 77, 78, 79, 75, 80, 75, 
	75, 74, 23, 24, 25, 26, 27, 23, 
	72, 94, 23, 23, 2, 74, 23, 24, 
	25, 26, 27, 23, 28, 23, 23, 2, 
	23, 24, 25, 26, 27, 23, 95, 73, 
	23, 23, 2, 42, 23, 24, 25, 26, 
	27, 23, 72, 23, 23, 2, 23, 24, 
	96, 25, 26, 27, 23, 28, 23, 23, 
	2, 23, 24, 25, 26, 27, 23, 28, 
	23, 23, 2, 23, 24, 96, 25, 26, 
	27, 23, 28, 23, 23, 2, 2, 17, 
	18, 97, 20, 21, 17, 22, 17, 17, 
	2, 0, 2, 17, 98, 18, 97, 20, 
	21, 17, 99, 100, 17, 17, 2, 0, 
	2, 17, 18, 19, 20, 21, 17, 22, 
	17, 17, 2, 0, 2, 17, 18, 97, 
	20, 21, 101, 17, 22, 17, 17, 2, 
	0, 2, 17, 18, 97, 20, 21, 102, 
	17, 22, 17, 17, 2, 0, 2, 17, 
	103, 19, 20, 21, 17, 22, 17, 17, 
	2, 0, 2, 104, 98, 18, 97, 20, 
	21, 17, 99, 105, 17, 17, 2, 0, 
	2, 17, 18, 97, 20, 21, 17, 106, 
	17, 17, 2, 0, 2, 17, 18, 19, 
	20, 21, 107, 22, 17, 17, 2, 0, 
	2, 17, 18, 97, 20, 21, 17, 108, 
	106, 17, 17, 2, 0, 2, 17, 109, 
	19, 20, 21, 17, 22, 17, 17, 2, 
	0, 42, 17, 98, 18, 97, 20, 21, 
	17, 99, 100, 17, 17, 2, 0, 42, 
	17, 18, 19, 20, 21, 17, 22, 17, 
	17, 2, 0, 2, 17, 18, 19, 20, 
	21, 17, 110, 17, 17, 2, 0, 2, 
	17, 18, 19, 20, 21, 17, 110, 17, 
	17, 2, 0, 2, 17, 18, 19, 20, 
	21, 17, 110, 111, 17, 17, 2, 0, 
	74, 17, 18, 19, 20, 21, 17, 22, 
	17, 17, 2, 0, 2, 17, 18, 19, 
	20, 21, 17, 110, 112, 17, 17, 2, 
	0, 74, 17, 18, 19, 20, 21, 17, 
	22, 17, 17, 2, 0, 2, 17, 18, 
	19, 20, 21, 17, 113, 111, 17, 17, 
	2, 0, 42, 17, 18, 19, 20, 21, 
	17, 110, 17, 17, 2, 0, 2, 17, 
	18, 114, 19, 20, 21, 17, 22, 17, 
	17, 2, 0, 2, 17, 18, 19, 20, 
	21, 17, 22, 17, 17, 2, 0, 2, 
	17, 18, 114, 19, 20, 21, 17, 22, 
	17, 17, 2, 0, 2, 3, 17, 18, 
	115, 20, 116, 17, 22, 17, 3, 3, 
	17, 2, 3, 0, 2, 3, 17, 18, 
	117, 20, 116, 101, 17, 22, 17, 3, 
	3, 17, 2, 3, 0, 2, 3, 17, 
	18, 117, 20, 116, 102, 17, 22, 17, 
	3, 3, 17, 2, 3, 0, 2, 3, 
	17, 18, 115, 20, 116, 107, 22, 17, 
	3, 3, 17, 2, 3, 0, 118, 119, 
	120, 121, 122, 118, 123, 118, 118, 13, 
	13, 13, 2, 118, 119, 124, 121, 122, 
	118, 123, 118, 118, 13, 13, 13, 2, 
	118, 125, 119, 124, 121, 122, 118, 126, 
	127, 118, 118, 13, 13, 13, 2, 118, 
	119, 120, 121, 122, 118, 123, 118, 118, 
	13, 13, 13, 2, 118, 119, 124, 121, 
	122, 128, 118, 123, 118, 118, 13, 13, 
	13, 2, 118, 119, 124, 121, 122, 129, 
	118, 123, 118, 118, 13, 13, 13, 2, 
	118, 130, 120, 121, 122, 118, 123, 118, 
	118, 13, 13, 13, 2, 131, 125, 119, 
	124, 121, 122, 118, 126, 132, 118, 118, 
	13, 13, 13, 2, 118, 119, 124, 121, 
	122, 118, 133, 118, 118, 13, 13, 13, 
	2, 118, 119, 120, 121, 122, 134, 123, 
	118, 118, 13, 13, 13, 2, 118, 119, 
	124, 121, 122, 118, 135, 133, 118, 118, 
	13, 13, 13, 2, 118, 136, 120, 121, 
	122, 118, 123, 118, 118, 13, 13, 13, 
	2, 42, 118, 125, 119, 124, 121, 122, 
	118, 126, 127, 118, 118, 13, 13, 13, 
	2, 42, 118, 119, 120, 121, 122, 118, 
	123, 118, 118, 13, 13, 13, 2, 118, 
	119, 120, 121, 122, 118, 137, 118, 118, 
	13, 13, 13, 2, 118, 119, 120, 121, 
	122, 118, 137, 118, 118, 13, 13, 13, 
	2, 118, 119, 120, 121, 122, 118, 137, 
	138, 118, 118, 13, 13, 13, 2, 74, 
	118, 119, 120, 121, 122, 118, 123, 118, 
	118, 13, 13, 13, 2, 118, 119, 120, 
	121, 122, 118, 137, 139, 118, 118, 13, 
	13, 13, 2, 74, 118, 119, 120, 121, 
	122, 118, 123, 118, 118, 13, 13, 13, 
	2, 118, 119, 120, 121, 122, 118, 140, 
	138, 118, 118, 13, 13, 13, 2, 42, 
	118, 119, 120, 121, 122, 118, 137, 118, 
	118, 13, 13, 13, 2, 118, 119, 141, 
	120, 121, 122, 118, 123, 118, 118, 13, 
	13, 13, 2, 118, 119, 120, 121, 122, 
	118, 123, 118, 118, 13, 13, 13, 2, 
	118, 119, 141, 120, 121, 122, 118, 123, 
	118, 118, 13, 13, 13, 2, 2, 6, 
	8, 14, 10, 15, 6, 142, 6, 6, 
	13, 5, 5, 0, 2, 6, 8, 143, 
	10, 15, 6, 142, 6, 6, 13, 5, 
	5, 0, 2, 6, 144, 8, 143, 10, 
	15, 6, 145, 146, 6, 6, 13, 5, 
	5, 0, 2, 6, 8, 14, 10, 15, 
	6, 142, 6, 6, 13, 5, 5, 0, 
	2, 6, 8, 143, 10, 15, 147, 6, 
	142, 6, 6, 13, 5, 5, 0, 2, 
	6, 8, 143, 10, 15, 148, 6, 142, 
	6, 6, 13, 5, 5, 0, 2, 6, 
	149, 14, 10, 15, 6, 142, 6, 6, 
	13, 5, 5, 0, 2, 150, 144, 8, 
	143, 10, 15, 6, 145, 151, 6, 6, 
	13, 5, 5, 0, 2, 6, 8, 143, 
	10, 15, 6, 152, 6, 6, 13, 5, 
	5, 0, 2, 6, 8, 14, 10, 15, 
	153, 142, 6, 6, 13, 5, 5, 0, 
	2, 6, 8, 143, 10, 15, 6, 154, 
	152, 6, 6, 13, 5, 5, 0, 2, 
	6, 155, 14, 10, 15, 6, 142, 6, 
	6, 13, 5, 5, 0, 42, 6, 144, 
	8, 143, 10, 15, 6, 145, 146, 6, 
	6, 13, 5, 5, 0, 42, 6, 8, 
	14, 10, 15, 6, 142, 6, 6, 13, 
	5, 5, 0, 2, 6, 8, 14, 10, 
	15, 6, 16, 6, 6, 13, 5, 5, 
	0, 2, 6, 8, 14, 10, 15, 6, 
	16, 6, 6, 13, 5, 5, 0, 2, 
	6, 8, 14, 10, 15, 6, 16, 156, 
	6, 6, 13, 5, 5, 0, 74, 6, 
	8, 14, 10, 15, 6, 142, 6, 6, 
	13, 5, 5, 0, 2, 6, 8, 14, 
	10, 15, 6, 16, 157, 6, 6, 13, 
	5, 5, 0, 74, 6, 8, 14, 10, 
	15, 6, 142, 6, 6, 13, 5, 5, 
	0, 2, 6, 8, 14, 10, 15, 6, 
	158, 156, 6, 6, 13, 5, 5, 0, 
	42, 6, 8, 14, 10, 15, 6, 16, 
	6, 6, 13, 5, 5, 0, 2, 6, 
	8, 159, 14, 10, 15, 6, 142, 6, 
	6, 13, 5, 5, 0, 2, 6, 8, 
	14, 10, 15, 6, 142, 6, 6, 13, 
	5, 5, 0, 2, 6, 8, 159, 14, 
	10, 15, 6, 142, 6, 6, 13, 5, 
	5, 0, 2, 3, 6, 5, 8, 160, 
	10, 11, 6, 142, 6, 7, 7, 6, 
	13, 5, 7, 5, 0, 2, 3, 6, 
	5, 8, 9, 10, 11, 147, 6, 142, 
	6, 7, 7, 6, 13, 5, 7, 5, 
	0, 2, 3, 6, 5, 8, 9, 10, 
	11, 148, 6, 142, 6, 7, 7, 6, 
	13, 5, 7, 5, 0, 2, 3, 6, 
	5, 8, 160, 10, 11, 153, 142, 6, 
	7, 7, 6, 13, 5, 7, 5, 0, 
	0
};

static const unsigned char _tag_guesser_trans_targs[] = {
	2, 2, 3, 102, 106, 131, 132, 156, 
	133, 158, 137, 159, 1, 106, 135, 140, 
	146, 78, 79, 81, 83, 86, 91, 4, 
	5, 7, 9, 12, 47, 8, 6, 46, 
	49, 77, 75, 10, 11, 73, 71, 13, 
	14, 15, 16, 17, 18, 20, 22, 25, 
	26, 21, 19, 41, 45, 43, 23, 24, 
	28, 27, 29, 30, 31, 32, 34, 38, 
	35, 33, 40, 36, 37, 39, 42, 44, 
	48, 50, 51, 52, 53, 55, 57, 59, 
	64, 56, 54, 63, 70, 68, 58, 66, 
	60, 61, 62, 65, 67, 69, 72, 74, 
	76, 82, 80, 90, 93, 101, 99, 84, 
	85, 97, 95, 87, 88, 89, 92, 94, 
	96, 98, 100, 103, 105, 104, 107, 108, 
	110, 112, 115, 120, 111, 109, 119, 122, 
	130, 128, 113, 114, 126, 124, 116, 117, 
	118, 121, 123, 125, 127, 129, 145, 136, 
	134, 144, 147, 155, 153, 138, 139, 151, 
	149, 141, 142, 143, 148, 150, 152, 154, 
	157
};

static const char _tag_guesser_trans_actions[] = {
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const char _tag_guesser_eof_actions[] = {
	0, 0, 2, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 5, 5, 6, 5, 5, 5, 5, 
	5, 5, 7, 5, 7, 5, 8, 8, 
	8, 9, 8, 8, 8, 10, 11, 8, 
	10, 7, 8, 5, 12, 12, 5, 13, 
	3, 13, 14, 14, 14, 14, 15, 14, 
	14, 14, 14, 14, 14, 14, 14, 8, 
	16, 14, 16, 14, 14, 17, 17, 13, 
	3, 13, 3, 3, 18, 18, 2, 2, 
	19, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 20, 21, 2, 21, 22, 21, 
	2, 21, 2, 2, 23, 23, 3, 3, 
	3, 3, 24, 24, 24, 25, 24, 24, 
	24, 24, 24, 24, 24, 24, 24, 26, 
	27, 24, 27, 28, 27, 24, 27, 24, 
	24, 29, 29, 30, 30, 30, 31, 30, 
	30, 30, 30, 30, 30, 30, 30, 30, 
	32, 33, 30, 33, 34, 33, 30, 33, 
	30, 30, 35, 35, 24, 24, 24, 24
};

static const int tag_guesser_start = 0;
static const int tag_guesser_first_final = 2;
static const int tag_guesser_error = -1;

static const int tag_guesser_en_main = 0;



void english_morpho_guesser::analyze(string_piece form, string_piece form_lc, vector<tagged_lemma>& lemmas) const {
  bool uppercase = form_lc.str != form.str;
  string lemma_lc(form_lc.str, form_lc.len), lemma;
  if (uppercase) lemma.assign(form.str, form.len);

  // Try finding negative prefix
  unsigned negation_len = 0;
  for (unsigned prefix = 0; prefix < form_lc.len; prefix++) {
    auto found = negations.at(form_lc.str, prefix, [](pointer_decoder& data){ data.next<unsigned char>(TOTAL); });
    if (!found) break;
    if (found[NEGATION_LEN]) {
      if (form_lc.len - prefix >= found[TO_FOLLOW]) negation_len = found[NEGATION_LEN];
      break;
    }
  }

  // Add default tags
  add(FW, lemma_lc, lemmas);
  add(JJ, lemma_lc, lemmas);
  add(RB, lemma_lc, lemmas);
  add(NN, lemma_lc, negation_len, lemmas);
  add_NNS(lemma_lc, negation_len, lemmas);
  if (uppercase) {
    add(NNP, lemma, lemmas);
    add_NNPS(lemma, lemmas);
  }

  // Add specialized tags
  const char* p = form_lc.str; int cs;
  
	{
	cs = tag_guesser_start;
	}

	{
	int _klen;
	const char *_keys;
	int _trans;

	if ( p == ( (form_lc.str + form_lc.len)) )
		goto _test_eof;
_resume:
	_keys = _tag_guesser_trans_keys + _tag_guesser_key_offsets[cs];
	_trans = _tag_guesser_index_offsets[cs];

	_klen = _tag_guesser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _tag_guesser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _tag_guesser_indicies[_trans];
	cs = _tag_guesser_trans_targs[_trans];

	if ( _tag_guesser_trans_actions[_trans] == 0 )
		goto _again;

	switch ( _tag_guesser_trans_actions[_trans] ) {
	case 1:
	{ if (!uppercase) add(NNP, lemma_lc, lemmas); }
	break;
	}

_again:
	if ( ++p != ( (form_lc.str + form_lc.len)) )
		goto _resume;
	_test_eof: {}
	if ( p == ( (form_lc.str + form_lc.len)) )
	{
	switch ( _tag_guesser_eof_actions[cs] ) {
	case 33:
	{ add_VBZ(lemma_lc, lemmas); }
	break;
	case 30:
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	break;
	case 32:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	break;
	case 34:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	break;
	case 35:
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	break;
	case 31:
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	break;
	case 21:
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 27:
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 2:
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 24:
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 20:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 26:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 22:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 28:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 23:
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 29:
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 19:
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	break;
	case 25:
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 13:
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 3:
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 7:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 5:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 16:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 14:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 18:
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 4:
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 11:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBZ(lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 8:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 12:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 6:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 17:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 15:
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 10:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBG(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	case 9:
	{ add_JJR_RBR(lemma_lc, negation_len, lemmas); }
	{ add_JJS_RBS(lemma_lc, negation_len, lemmas); }
	{ add_VBD_VBN(lemma_lc, lemmas); }
	{ add(VB, lemma_lc, lemmas); add(VBP, lemma_lc, lemmas); }
	{ add(SYM, lemma_lc, lemmas); }
	{ add(CD, lemma_lc, lemmas); }
	break;
	}
	}

	}


}

inline void english_morpho_guesser::add(const string& tag, const string& form, vector<tagged_lemma>& lemmas) const {
  lemmas.emplace_back(form, tag);
}

inline void english_morpho_guesser::add(const string& tag, const string& form, unsigned negation_len, vector<tagged_lemma>& lemmas) const {
  lemmas.emplace_back(negation_len ? form.substr(negation_len) + "^" + form.substr(0, negation_len) : form, tag);
}

inline void english_morpho_guesser::add_NNS(const string& form, unsigned negation_len, vector<tagged_lemma>& lemmas) const {
  add(NNS, form, negation_len, lemmas);
}

inline void english_morpho_guesser::add_NNPS(const string& form, vector<tagged_lemma>& lemmas) const {
  add(NNPS, form, lemmas);
}

inline void english_morpho_guesser::add_VBG(const string& form, vector<tagged_lemma>& lemmas) const {
  add(VBG, form, lemmas);
}

inline void english_morpho_guesser::add_VBD_VBN(const string& form, vector<tagged_lemma>& lemmas) const {
  add(VBD, form, lemmas);
  add(VBN, form, lemmas);
}

inline void english_morpho_guesser::add_VBZ(const string& form, vector<tagged_lemma>& lemmas) const {
  add(VBZ, form, lemmas);
}

inline void english_morpho_guesser::add_JJR_RBR(const string& form, unsigned negation_len, vector<tagged_lemma>& lemmas) const {
  add(JJR, form, negation_len, lemmas);
  add(RBR, form, negation_len, lemmas);
}

inline void english_morpho_guesser::add_JJS_RBS(const string& form, unsigned negation_len, vector<tagged_lemma>& lemmas) const {
  add(JJS, form, negation_len, lemmas);
  add(RBS, form, negation_len, lemmas);
}

} // namespace morphodita
} // namespace ufal
