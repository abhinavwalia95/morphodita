MorphoDiTa User's Manual


%!encoding: utf-8

In a natural language text, the task of morphologic analysis is to assign for
each token (word) in a sentence its lemma (cannonical form) and
a part-of-speech tag (POS tag). This is usually achieved in two steps:
a morphologic dictionary looks up all possible lemmas and POS tags for each
word, and subsequently, a morphologic tagger picks for each word the best
lemma-POS tag candidate. The second task is called a disambiguation.

MorphoDiTa also performs these two steps of morphologic analysis: It first outputs all possible pairs of lemma and POS tag for each token. In Czech, this procedure is based on a well-known Jan Hajič's morphologic dictionary ([Hajič 2004 http://books.google.cz/books?id=sB63AAAACAAJ]). Consequently, the optimal combination of lemmas and POS tags is selected for the words in a sentence using an algorithm described in [Spoustová et al. 2009 http://aclweb.org/anthology//E/E09/E09-1087.pdf].

This section describes the commandline tools and interfaces; the models and
dictionaries; and the Czech morphology. The C++ library with bindings for other
languages is described elsewhere, either in MorphoDiTa API Tutorial or in
MorphoDiTa API Reference.

== Models ==

Like any supervised machine learning tool, MorphoDiTa needs a trained linguistic model. Czech models trained on [PDT 2.5 http://ufal.mff.cuni.cz/pdt2.5/] are distributed with the tool. The models are distributed under the [CC BY-NC-SA http://creativecommons.org/licenses/by-nc-sa/3.0/] licence.

One may wish to use either a larger, more precise, but slower model; or a more
light-weight, faster, but less accurate model. The parameters of the models
distributed with MorphoDiTa are as follows:

: ``czech-<version>.tagger-best_accuracy``
  Best and slowest tagger (Viterbi of order 3). Reaches 95.70% tag accuracy, 97.78% lemma accuracy, 94.99% overall accuracy on [PDT 2.5 http://ufal.mff.cuni.cz/pdt2.5/] etest data. Speed: ~10k words/s, size: 17MB.

  For comparison, model trained by [Featurama http://sourceforge.net/projects/featurama/] (state-of-the-art Czech tagger implementation) reaches 95.66%, 97.70%, 94.90% of tag, lemma and overall accuracy, respectively, with speed ~2k words/s and size 210MB.

: ``czech-<version>.tagger-fast``
  Faster tagger with slightly worse results (Viterbi of order 2). Reaches 94.71% tag accuracy, 97.66% lemma accuracy, 93.95% overall accuracy on [PDT 2.5 http://ufal.mff.cuni.cz/pdt2.5] etest data. Speed: ~60k words/s, size: 11MB.

: ``czech-<version>.lemmatizer``
  Very fast tagger using only first two tag positions. Can be used as a lemmatizator. Reaches 99.18% tag accuracy, 97.63% lemma accuracy, 97.58% overall accuracy on [PDT 2.5 http://ufal.mff.cuni.cz/pdt2.5] etest data. Speed: ~200k words/s, size: 4MB.


Please make sure you are using the linguistic models in a version corresponding to your MorphoDiTa release. The best way to assure this is to use the most current MorphoDiTa release with the most current model release.

== Dictionaries ==

MorphoDiTa is distributed with two Czech morphologic dictionaries:

: ``czech-<version>.dict``
  Jan Hajič's ([Hajič 2004 http://books.google.cz/books?id=sB63AAAACAAJ]) morpho dictionary used by ``czech-<version>_best_accuracy.tagger`` and ``czech-<version>_fast.tagger``.

: ``czech-<version>.lemmadict``
  Jan Hajič ([Hajič 2004 http://books.google.cz/books?id=sB63AAAACAAJ]) morpho dictionary used by ``czech-<version>_lemmatizer.tagger``, using only first two tag positions.


== Czech Morphology ==

In the Czech language, MorphoDiTa uses Czech morphologic system by
Jan Hajič ([Hajič 2004 http://books.google.cz/books?id=sB63AAAACAAJ]).
In this system, tags are positional with 15 positions corresponding to part of
speech, detailed part of speech, gender, number, case, etc. (e.g. ``NNFS1-----A----``).
Czech lemmas consist of a base part, which is a meaningful prefix and we call
it a ``raw lemma`` in this documentation; and a certain number of technical
suffixes. The following examples illustrate this:

- ``Japonsko_;G`` (raw lemma: ``Japonsko``)
- ``se_^(zvr._zájmeno/částice)`` (raw lemma: ``se``)
- ``tvořit_:T`` (raw lemma: ``tvořit``)


For a more detailed reference about the Czech morphology, please see
[Lemma and Tag Structure in PDT 2.0 http://ufal.mff.cuni.cz/pdt2.0/doc/manuals/en/m-layer/html/ch02.html].


== Running the Tagger ==[run_tagger]

Probably the most common usage of MorphoDita is running a tagger to tag your data using
``` run_tagger tagger_model

The input is assumed to be in UTF-8 encoding and can be either already
tokenized and segmented, or it can be a plain text which is tokenized and
segmented automatically.

Any number of files can be specified after the ``tagger_model``. If an argument
``input_file:output_file`` is used, the given ``input_file`` is processed and
the result is saved to ``output_file``. If only ``input_file`` is used, the
result is saved to standard output. If no argument is given, input is read
from standard input and written to standard output.

The full command syntax of ``run_tagger`` is
``` run_tagger [-v] tagger_model [input_file[:output_file]]...

=== Untokenized Input ===[run_tagger_untokenized]

By default (i.e., without specifying ``-v``), the input is assumed to be
a plain text and it is automatically tokenized and segmented by default. The
output is in XML format without a root element, using
``<form lemma="..." tag="...">...</form>`` element to encode the assigned lemma
and tag.

Example input data ``tagger_input.txt``:
``` Děti pojedou k babičce. Už se těší.

Example MorphoDiTa run_tagger command line:
``` ./run_tagger czech.best_accuracy_tagger tagger_input.txt

Example output data (line breaks added):
```
<form lemma='dítě' tag='NNFP1-----A----'>Děti</form>
<form lemma='jet-1_^(pohybovat_se,_ne_však_chůzí)' tag='VB-P---3F-AA---'>pojedou</form>
<form lemma='k-1' tag='RR--3----------'>k</form>
<form lemma='babička' tag='NNFS3-----A----'>babičce</form>
<form lemma='.' tag='Z:-------------'>.</form>
<form lemma='už-1' tag='Db-------------'>Už</form>
<form lemma='se_^(zvr._zájmeno/částice)' tag='P7-X4----------'>se</form>
<form lemma='těšit_:T' tag='VB-S---3P-AA---'>těší</form>
<form lemma='.' tag='Z:-------------'>.</form>
```

=== Vertical Format ===[run_tagger_vertical]

If the input is already tokenized and segmented, vertical input format can be used
by specifying ``-v`` option as a first argument of ``run_tagger``.
The vertical input format contains word on a line, empty line being end of sentence.
The output has the same number of lines as input, line //l// is a tab separated
lemma-tag pair assigned to the word on the input line //l//.

Example input data ``tagger_input_vertical.txt``:
```
Děti
pojedou
k
babičce
.

Už
se
těší
.
```

Example MorphoDiTa ``run_tagger`` command line:
``` ./run_tagger -v czech.best_accuracy_tagger tagger_input_vertical.txt

Example output:
```
dítě    NNFP1-----A----
jet-1_^(pohybovat_se,_ne_však_chůzí)    VB-P---3F-AA---
k-1     RR--3----------
babička NNFS3-----A----
.       Z:-------------

už-1    Db-------------
se_^(zvr._zájmeno/částice)      P7-X4----------
těšit_:T        VB-S---3P-AA---
.       Z:-------------
```

== Running the Morphology ==

There are multiple commands performing morphologic tasks.
The [``run_morpho_analyze`` #run_morpho_analyze] executable performs morphologic analysis and
the [``run_morpho_generate`` #run_morpho_generate] executable performs morphologic generation.
The output of these commands is suitable for automatic processing.

The [``run_morpho_cli`` #run_morpho_cli] executable performs both morphologic analysis and generation,
but is designed to be used interactively and produces more human-readable output.

=== Morphologic Analysis ===[run_morpho_analyze]

The morphologic analysis can be performed by running
``` run_morpho_analyze morphology_model use_guesser

The input is assumed to be in UTF-8 encoding and can be either already
tokenized and segmented, or it can be a plain text which is tokenized and
segmented automatically. The input files are specified same as with the
[``run_tagger`` #run_tagger] command.

Some morphologic models contain both a manually created dictionary and
a guesser. Therefore, a numeric ``use_guesser`` argument is required.
If non-zero, the guesser is used, otherwise not.

The full command syntax of ``run_morpho_analyze`` is
``` run_morpho_analyze [-v] morphology_model use_guesser [input_file[:output_file]]...

==== Untokenized Input ====[run_morpho_analyze_untokenized]

By default (i.e., without specifying ``-v``), the input is assumed to be
a plain text and it is automatically tokenized and segmented by default. The
output is in XML format without a root element, using
``<form><analysis lemma="..." tag="..."/><analysis...>...</form>`` element to
encode the assigned lemma and tag.

Example input data:
``` Děti pojedou k babičce. Už se těší.

Example ``run_morpho_analyze`` command line:
``` ./run_morpho_analyze czech.dict 0

Example output data (line breaks added):
```
<form><analysis lemma="dítě" tag="NNFP1-----A----"/><analysis lemma="dítě" tag="NNFP4-----A----"/><analysis lemma="dítě" tag="NNFP5-----A----"/>Děti</form>
<form><analysis lemma="jet-1_^(pohybovat_se,_ne_však_chůzí)" tag="VB-P---3F-AA---"/>pojedou</form>
<form><analysis lemma="k-1" tag="RR--3----------"/><analysis lemma="k-3_^(označení_pomocí_písmene)" tag="NNNXX-----A----"/><analysis lemma="k-4`kůň_:B_^(jednotka_výkonu)" tag="NNMXX-----A---8"/><analysis lemma="k-8_:B_^(ost._zkratka)" tag="XX------------8"/><analysis lemma="komanditní_:B_^(jen_komanditní_společnost)" tag="AAXXX----1A---8"/><analysis lemma="koncernový_:B" tag="AAXXX----1A---8"/><analysis lemma="kuo-1_:B_,t_^(stará_jednotka_výkonu)" tag="NNNXX-----A---8"/>k</form>
<form><analysis lemma="babička" tag="NNFS3-----A----"/><analysis lemma="babička" tag="NNFS6-----A----"/>babičce</form>
<form><analysis lemma="." tag="Z:-------------"/>.</form>
<form><analysis lemma="už-1" tag="Db-------------"/><analysis lemma="už-2" tag="TT-------------"/>Už</form>
<form><analysis lemma="se_^(zvr._zájmeno/částice)" tag="P7-X4----------"/><analysis lemma="s-1" tag="RV--2----------"/><analysis lemma="s-1" tag="RV--7----------"/>se</form>
<form><analysis lemma="těšit_:T" tag="VB-P---3P-AA---"/><analysis lemma="těšit_:T" tag="VB-S---3P-AA---"/>těší</form>
<form><analysis lemma="." tag="Z:-------------"/>.</form>
```

==== Vertical Format ====[run_morpho_analyze_vertical]

If the input is already tokenized and segmented, vertical input format can be used
by specifying ``-v`` option as a first argument of ``run_morpho_analyze``.
The vertical input format contains word on a line, empty line being end of sentence.
The output has the same number of lines as input, line //l// contains tab separated
lemma-tag pairs assigned to the word on the input line //l//.

Example input data:
```
Děti
pojedou
k
babičce
.

Už
se
těší
.
```

Example ``run_morpho_analyze`` command line:
``` ./run_morpho_analyze -v czech.dict 0

Example output:
```
dítě	NNFP1-----A----	dítě	NNFP4-----A----	dítě	NNFP5-----A----
jet-1_^(pohybovat_se,_ne_však_chůzí)	VB-P---3F-AA---
k-1	RR--3----------	k-3_^(označení_pomocí_písmene)	NNNXX-----A----	k-4`kůň_:B_^(jednotka_výkonu)	NNMXX-----A---8	k-8_:B_^(ost._zkratka)	XX------------8	komanditní_:B_^(jen_komanditní_společnost)	AAXXX----1A---8	koncernový_:B	AAXXX----1A---8	kuo-1_:B_,t_^(stará_jednotka_výkonu)	NNNXX-----A---8
babička	NNFS3-----A----	babička	NNFS6-----A----
.	Z:-------------

už-1	Db-------------	už-2	TT-------------
se_^(zvr._zájmeno/částice)	P7-X4----------	s-1	RV--2----------	s-1	RV--7----------
těšit_:T	VB-P---3P-AA---	těšit_:T	VB-S---3P-AA---
.	Z:-------------
```

=== Morphologic Generation ===[run_morpho_generate]

The morphologic generation can be performed by running
``` run_morpho_generate morphology_model use_guesser

The input is assumed to be in UTF-8 encoding. The input files are specified
same as with the [``run_tagger`` #run_tagger] command.

Input for morphologic generation has to be in vertical format, each line
containing a lemma, which can be optionally followed by a tab and a
[tag wildcard #tag_wildcard]. The output has the same number of lines as input,
line //l// contains tab separated form-lemma-tag triplets which can be generated
from the lemma on he input line //l//. If a tag wildcard was provided, only
triplets with matching tags are returned.

Some morphologic models contain both a manually created dictionary and
a guesser. Therefore, a numeric ``use_guesser`` argument is required.
If non-zero, the guesser is used, otherwise not.

The full command syntax of ``run_morpho_generate`` is
``` run_morpho_generate [-v] morphology_model use_guesser [input_file[:output_file]]...

Example input data:
```
dítě
jet	?[fN]??[-1]
k-1
babička	NNFS3-----A----
```

Example ``run_morpho_generate`` command line:
``` ./run_morpho_generate czech.dict 0

Example output:
```
dítě	dítě	NNNS1-----A----	dítě	dítě	NNNS4-----A----	dítě	dítě	NNNS5-----A----	dítěte	dítě	NNNS2-----A----	dítěti	dítě	NNNS3-----A----	dítěti	dítě	NNNS6-----A----	dítětem	dítě	NNNS7-----A----	děti	dítě	NNFP1-----A----	děti	dítě	NNFP4-----A----	děti	dítě	NNFP5-----A----	dětma	dítě	NNFP7-----A---6	dětmi	dítě	NNFP7-----A----	dětem	dítě	NNFP3-----A----	dětí	dítě	NNFP2-----A----	dětech	dítě	NNFP6-----A----	dětima	dítě_,h	NNFP7-----A---6
ject	jet	Vf--------A---6	jet	jet-1_^(pohybovat_se,_ne_však_chůzí)	Vf--------A----	jeti	jet-1_^(pohybovat_se,_ne_však_chůzí)	Vf--------A---2	nejet	jet-1_^(pohybovat_se,_ne_však_chůzí)	Vf--------N----	nejeti	jet-1_^(pohybovat_se,_ne_však_chůzí)	Vf--------N---2	jet	jet-2_,h_^(letadlo_s_tryskovým_pohonem)NNIS1-----A----	jety	jet-2_,h_^(letadlo_s_tryskovým_pohonem)	NNIP1-----A----
k	k-1	RR--3----------	ke	k-1	RV--3----------	ku	k-1	RV--3---------1
babičce babička NNFS3-----A----
```

==== Tag Wildcards ====[tag_wildcard]

When only forms with a specific tag should be generated for a given lemma, tag
wildcard can be specified. The tag wildcard is a simple wildcard allowing to filter
the results of morphologic generation.

Most characters of a tag wildcard match corresponding characters of a tag, with the following exceptions:
 - ``?`` matches any character of a tag.
 - ``[chars]`` matches any of the characters listed. The dash ``-`` has no special meaning and if ``]``
   is the first character in ``chars``, it is considered as one of the characters and does not end the group.
 - ``[^chars]`` matches any of the characters //not// listed.


=== Interactive Morphologic Analysis and Generation ===[run_morpho_cli]


Morphologic analysis and generation which is interactive and more human readable
can be run using:
``` run_morpho_cli morphology_model

The input is read from standard input, command on each line. If there is no space
on a line, analysis is performed on the given word. Otherwise generation is performed
on the first word, using the rest of the line as a [tag wildcard #tag_wildcard].
If the second word is empty (i.e., the input is for example ``on ``), all forms
are generated.

== Running the Tokenizer ==[run_tokenizer]

Using the ``run_tokenizer`` executable it is possible to perform only
tokenization and segmentation.

The tokenizer can be specified either using a morphologic dictionary, or
using a tokenizer identifier. Currently only one tokenizer ``-czech``
is available.

The input is a UTF-8 encoded plain text and the output is in the vertical
format -- each word is on a separate line and every sentence is ended
by a blank line. The input files are specified same as with the
[``run_tagger`` #run_tagger] command.

The full command syntax of ``run_tokenizer`` is
``` run_tokenizer tagger_model|-czech [input_file[:output_file]]...

Example input:
``` Děti pojedou k babičce. Už se těší.

Example tokenization command line:
``` run_tokenizer czech.dict

Example output:
```
Děti
pojedou
k
babičce
.

Už
se
těší
.

```
