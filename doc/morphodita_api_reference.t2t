MorphoDiTa API Reference
========================

%!encoding: utf-8

The MorphoDiTa API is defined in header ``morphodita.h`` and resides in
``ufal::morphodita`` namespace.

The strings used in the MorphoDiTa API are always UTF-8 encoded (except from
file paths, whose encoding is system dependent).


== MorphoDiTa Versioning ==[versioning]

MorphoDiTa version consists of three numbers //major.minor.patch// with the
following semantics:

- Even //patch// versions denote stable releases, odd //patch// versions denote
  development releases.
- Two versions with the same //major.minor// have the same API with the same
  behaviour, apart from bugs. Therefore, if only //patch// is increased, the
  new version is only a bug-fix release.
- If two versions //v// and //u// have the same //major//, but //minor(v)// is
  greater than //minor(u)//, version //v// contains only additions to the API.
  In other words, the API of //u// is all present in //v// with the same
  behaviour (once again apart from bugs). It is therefore safe to upgrade to
  a newer MorphoDiTa version with the same //major//.
- If two versions differ in //major//, their API may differ in any way.


== Lemma Structure ==[lemma_structure]

The lemmas used by MorphoDiTa consist of three parts:

+ //raw lemma//: text form of the lemma. May not uniquely distinguish
  lemma meanings, lemma use cases etc.
+ //lemma id//: together with raw lemma provide a unique identifier of the lemma,
  possibly including lemma meanings or use cases.
+ //lemma comments//: additional comments for the given lemma.


These parts are stored in one string and the boundaries between them can be
determined by
[``morpho::raw_lemma_len`` #morpho_raw_lemma_len] and
[``morpho::lemma_id_len`` #morpho_lemma_id_len] methods.
Analyzer and tagger always return lemma in this structured form. When
performing morphological generation, either //raw lemma// or both //raw lemma// and
//lemma id// can be specified, any //lemma comments// are ignored.


== Struct string_piece ==[string_piece]
```
struct string_piece {
  const char* str;
  size_t len;

  string_piece();
  string_piece(const char* str);
  string_piece(const char* str, size_t len);
  string_piece(const std::string& str);
}
```

The [``string_piece`` #string_piece] is used for efficient string passing. The string
referenced in [``string_piece`` #string_piece] is not owned by it, so users have to make sure
the referenced string exists as long as the [``string_piece`` #string_piece].

== Struct tagged_form ==[tagged_form]
```
struct tagged_form {
  std::string form;
  std::string tag;
};
```

The [``tagged_form`` #tagged_form] is a pair of strings used when obtaining a form and tag
pair.

== Struct tagged_lemma ==[tagged_lemma]
```
struct tagged_lemma {
  std::string lemma;
  std::string tag;
};
```

The [``tagged_lemma`` #tagged_lemma] is a pair of strings used when obtaining a lemma and tag
pair.

== Struct tagged_lemma_forms ==[tagged_lemma_forms]
```
struct tagged_lemma_forms {
  std::string lemma;
  std::vector<[tagged_form #tagged_form]> forms;
};
```

The [``tagged_lemma_forms`` #tagged_lemma_forms] represents a lemma and a list of tagged forms.

== Struct token_range ==[token_range]
```
struct token_range {
  size_t start;
  size_t length;
};
```

The [``token_range`` #token_range] represent a range of a token as returned by a [tokenizer #tokenizer].
The ``start`` and ``length`` fields specify the token position in Unicode
characters, not in bytes of UTF-8 encoding.

== Class version ==[version]
```
class version {
 public:
  unsigned major;
  unsigned minor;
  unsigned patch;

  static [version #version] [current #version_current]();
};
```

The [``version`` #version] class represents MorphoDiTa version.
See [MorphoDiTa Versioning #versioning] for more information.

=== version::current ===[version_current]
``` static [version #version] current();

Returns current MorphoDiTa version.


== Class tokenizer ==[tokenizer]
```
class tokenizer {
 public:
  virtual ~tokenizer() {}

  virtual void [set_text #tokenizer_set_text]([string_piece #string_piece] text, bool make_copy = false) = 0;
  virtual bool [next_sentence #tokenizer_next_sentence](std::vector<[string_piece #string_piece]>* forms, std::vector<[token_range #token_range]>* tokens) = 0;

  static [tokenizer #tokenizer]* [new_vertical_tokenizer #tokenizer_new_vertical_tokenizer]();
  static [tokenizer #tokenizer]* [new_czech_tokenizer #tokenizer_new_czech_tokenizer]();
  static [tokenizer #tokenizer]* [new_english_tokenizer #tokenizer_new_english_tokenizer]();
  static [tokenizer #tokenizer]* [new_generic_tokenizer #tokenizer_new_generic_tokenizer]();
};
```

The [``tokenizer`` #tokenizer] class performs segmentation and tokenization of given text.
The class is //not// threadsafe.

The [``tokenizer`` #tokenizer] instances can be obtained either directly using
static methods or through instances of [``morpho`` #morpho] and [``tagger`` #tagger].

=== tokenizer::set_text ===[tokenizer_set_text]
``` virtual void set_text([string_piece #string_piece] text, bool make_copy = false) = 0;

Set the text which is to be tokenized.

If ``make_copy`` is ``false``, only a reference to the given text is
stored and the user has to make sure it exists until the tokenizer
is released or ``set_text`` is called again. If ``make_copy``
is ``true``, a copy of the given text is made and retained until the
tokenizer is released or ``set_text`` is called again.

=== tokenizer::next_sentence ===[tokenizer_next_sentence]
``` virtual bool next_sentence(std::vector<[string_piece #string_piece]>* forms, std::vector<[token_range #token_range]>* tokens) = 0;

Locate and return next sentence of the given text. Returns ``true`` when successful and ``false`` when
there are no more sentences in the given text. The arguments are filled with found tokens if not ``NULL``.
The ``forms`` contain token ranges in bytes of UTF-8 encoding, the ``tokens`` contain token ranges
in Unicode characters.

=== tokenizer::new_vertical_tokenizer ===[tokenizer_new_vertical_tokenizer]
``` static [tokenizer #tokenizer] new_vertical_tokenizer();

Returns a new instance of a vertical tokenizer, which considers every line to
be one token, with empty line denoting end of sentence. The user should delete
the instance after use.

=== tokenizer::new_czech_tokenizer ===[tokenizer_new_czech_tokenizer]
``` static [tokenizer #tokenizer] new_czech_tokenizer();

Returns a new instance of a Czech tokenizer. The user should delete it after
use.

=== tokenizer::new_english_tokenizer ===[tokenizer_new_english_tokenizer]
``` static [tokenizer #tokenizer] new_english_tokenizer();

Returns a new instance of a English tokenizer. The user should delete it after
use.

=== tokenizer::new_generic_tokenizer ===[tokenizer_new_generic_tokenizer]
``` static [tokenizer #tokenizer] new_generic_tokenizer();

Returns a new instance of a generic tokenizer. The user should delete it after
use.


== Class morpho ==[morpho]
```
class morpho {
 public:
  virtual ~morpho() {}

  static [morpho #morpho]* [load #morpho_load_cstring](const char* fname);
  static [morpho #morpho]* [load #morpho_load_FILE](FILE* f);

  enum [guesser_mode #morpho_guesser_mode] { NO_GUESSER = 0, GUESSER = 1 };

  virtual int [analyze #morpho_analyze]([string_piece #string_piece] form, [guesser_mode #morpho_guesser_mode] guesser, std::vector<[tagged_lemma #tagged_lemma]>& lemmas) const = 0;
  virtual int [generate #morpho_generate]([string_piece #string_piece] lemma, const char* tag_wildcard, [guesser_mode #morpho_guesser_mode] guesser,
                       std::vector<[tagged_lemma_forms #tagged_lemma_forms]>& forms) const = 0;

  virtual int [raw_lemma_len #morpho_raw_lemma_len]([string_piece #string_piece] lemma) const = 0;
  virtual int [lemma_id_len #morpho_lemma_id_len]([string_piece #string_piece] lemma) const = 0;
  virtual int [raw_form_len #morpho_raw_form_len]([string_piece #string_piece] form) const = 0;

  virtual [tokenizer #tokenizer]* [new_tokenizer #morpho_new_tokenizer]() const = 0;
};
```

A [``morpho`` #morpho] instance represents a morphological dictionary. Such a dictionary allow
morphological analysis, morphological generation provide information about lemma structure
and provides a suitable tokenizer. All methods are thread-safe.

=== morpho::load(const char*) ===[morpho_load_cstring]
``` static [morpho #morpho]* load(const char* fname);

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of [``morpho`` #morpho] which the user should delete
after use.

=== morpho::load(FILE*) ===[morpho_load_FILE]
``` static [morpho #morpho]* load(FILE* f);

Factory method constructor. Accepts C file pointer of an opened file with the
model. Returns a pointer to an instance of [``morpho`` #morpho] which the user should
delete after use.

=== morpho::guesser_mode ===[morpho_guesser_mode]
``` enum [guesser_mode #morpho_guesser_mode] { NO_GUESSER = 0, GUESSER = 1 };

Guesser mode defines behavior in case of unknown words. When set to
``GUESSER``, morpho tries to guess unknown words. When set to ``NO_GUESSER``,
morpho does not guess unknown words.

=== morpho::analyze() ===[morpho_analyze]
``` virtual int analyze([string_piece #string_piece] form, [guesser_mode #morpho_guesser_mode] guesser, std::vector<[tagged_lemma #tagged_lemma]>& lemmas) const = 0;

Perform morphological analysis of a form. The guesser parameter specifies whether
a guesser can be used if the form is not found in the dictionary. Output is
assigned to the lemmas vector.

If the form is found in the dictionary, analyses are assigned to lemmas
and ``NO_GUESSER`` returned. If ``guesser == GUESSER`` and the form analyses are
found using a guesser, they are assigned to lemmas and ``GUESSER`` is
returned.  Otherwise ``-1`` is returned and lemmas are filled with one
analysis containing given form as lemma and a tag for unknown word.

=== morpho::generate() ===[morpho_generate]
```
virtual int generate([string_piece #string_piece] lemmma, const char* tag_wildcard, [guesser_mode #morpho_guesser_mode] guesser,
                     std::vector<[tagged_lemma_forms #tagged_lemma_forms]>& forms) const = 0;
```

Perform morphological generation of a lemma. Optionally a tag_wildcard can be
specified (or be ``NULL``) and if so, results are filtered using this wildcard.
The guesser parameter speficies whether a guesser can be used if the lemma is
not found in the dictionary. Output is assigned to the forms vector.

Tag_wildcard can be either ``NULL`` or a wildcard applied to the results.
A ``?`` in the wildcard matches any character, ``[bytes]`` matches any of the
bytes and ``[^bytes]`` matches any byte different from the specified ones.
A ``-`` has no special meaning inside the bytes and if ``]`` is first in bytes,
it does not end the bytes group.

If the given lemma is only a raw lemma, all lemma ids with this raw lemma are
returned. Otherwise only matching lemma ids are returned, ignoring any lemma
comments. For every found lemma, matching forms are filtered using the
tag_wildcard. If at least one lemma is found in the dictionary, ``NO_GUESSER``
is returned. If ``guesser == GUESSER`` and the lemma is found by the guesser,
``GUESSER`` is returned. Otherwise, forms are cleared and ``-1`` is returned.

=== morpho::raw_lemma_len ===[morpho_raw_lemma_len]
``` virtual int raw_lemma_len([string_piece #string_piece] lemma) const = 0;

When given a lemma returned by the dictionary, returns the length of
a //raw lemma// (see [Lemma Structure #lemma_structure]).

=== morpho::lemma_id_len ===[morpho_lemma_id_len]
``` virtual int lemma_id_len([string_piece #string_piece] lemma) const = 0;

When given a lemma returned by the dictionary, returns the length of
a //raw lemma// plus a //lemma id// (see [Lemma Structure #lemma_structure]).
Therefore, the substring of the original lemma of this length is a unique
lemma identifier. The rest of the original lemma are lemma comments which
do not identify the lemma.

=== morpho::raw_form_len ===[morpho_raw_form_len]
``` virtual int raw_form_len([string_piece #string_piece] form) const = 0;

When given a form, returns the length of a //raw form//. This is used only in
//external morphology model//, where form contains also morphological analyses,
and this call can return the length of the form without the analyses.

=== morpho::new_tokenizer ===[morpho_new_tokenizer]
``` virtual [tokenizer #tokenizer]* new_tokenizer() const = 0;

Returns a new instance of a suitable tokenizer or ``NULL`` if no such tokenizer
exists. The user should delete it after use.

== Class tagger ==[tagger]

```
class tagger {
 public:
  virtual ~tagger() {}

  static [tagger #tagger]* [load #tagger_load_cstring](const char* fname);
  static [tagger #tagger]* [load #tagger_load_FILE](FILE* f);

  virtual const [morpho #morpho]* [get_morpho #tagger_get_morpho]() const = 0;

  virtual void [tag #tagger_tag](const std::vector<[string_piece #string_piece]>& forms, std::vector<[tagged_lemma #tagged_lemma]>& tags) const = 0;

  [tokenizer #tokenizer]* [new_tokenizer #tagger_new_tokenizer]() const = 0;
};
```

A [``tagger`` #tagger] instance represents a tagger, which perform disambiguation of
morphological analyses. All methods are thread-safe.

=== tagger::load(const char*) ===[tagger_load_cstring]
``` static [tagger #tagger]* load(const char* fname);

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of [``tagger`` #tagger] which the user should delete
after use.


=== tagger::load(FILE*) ===[tagger_load_FILE]
``` static [tagger #tagger]* load(FILE* f);

Factory method constructor. Accepts C file pointer of an opened file with the
model. Returns a pointer to an instance of [``tagger`` #tagger] which the user should
delete after use.

=== tagger::get_morpho() ===[tagger_get_morpho]
``` virtual const [morpho #morpho]* get_morpho() const = 0;

Returns a pointer to an instance of [``morpho`` #morpho] associated with the tagger. Do
not delete the pointer, it is owned by the tagger instance and deleted in the
tagger destructor.

=== tagger::tag() ===[tagger_tag]
``` virtual void tag(const std::vector<[string_piece #string_piece]>& forms, std::vector<[tagged_lemma #tagged_lemma]>& tags) const = 0;

Perform morphological analysis and subsequent disambiguation. Accepts
a ``std::vector`` of [``string_piece`` #string_piece] and fills the output vector of [``tagged_lemma`` #tagged_lemma].

=== tagger::new_tokenizer ===[tagger_new_tokenizer]
``` virtual [tokenizer #tokenizer]* new_tokenizer() const = 0;

Returns a new instance of a suitable tokenizer or ``NULL`` if no such tokenizer
exists. The user should delete it after use.  The call is equal to
``[get_morpho() #tagger_get_morpho]->[new_tokenizer() #morpho_new_tokenizer]``.

== Class tagset_converter ==[tagset_converter]

```
class tagset_converter {
 public:
  virtual ~tagset_converter() {}

  virtual void [convert #tagset_converter_convert]([tagged_lemma #tagged_lemma]& tagged_lemma) const = 0;
  virtual void [convert_analyzed #tagset_converter_convert_analyzed](std::vector<[tagged_lemma #tagged_lemma]>& tagged_lemmas) const = 0;
  virtual void [convert_generated #tagset_converter_convert_generated](std::vector<[tagged_lemma_forms #tagged_lemma_forms]>& forms) const = 0;

  static [tagset_converter* #tagset_converter] [new_identity_converter #tagset_converter_new_identity_converter]();
  static [tagset_converter* #tagset_converter] [new_pdt_to_conll2009_converter #tagset_converter_new_pdt_to_conll2009_converter]();
};
```

=== tagset_converter::convert() ===[tagset_converter_convert]
``` virtual void convert([tagged_lemma #tagged_lemma]& tagged_lemma) const = 0;

Convert the given tagged lemma.

=== tagset_converter::convert_analyzed() ===[tagset_converter_convert_analyzed]
``` virtual void convert_analyzed(std::vector<[tagged_lemma #tagged_lemma]>& tagged_lemmas) const = 0;

Convert the given results of [morpho::analyze #morpho_analyze]. Apart from calling
[convert #tagset_converter_convert], any repeated entries are removed.

=== tagset_converter::convert_generated() ===[tagset_converter_convert_generated]
``` virtual void convert_generated(std::vector<[tagged_lemma_forms #tagged_lemma_forms]>& forms) const = 0;

Convert the given results of [morpho::generate #morpho_generate]. Apart from calling
[convert #tagset_converter_convert], any repeated entries are removed.

=== tagset_converter::new_identity_converter() ===[tagset_converter_new_identity_converter]
``` static [tagset_converter* #tagset_converter] new_identity_converter();

Returns a new instance of an identity converter. All convert methods of an
identity converter do nothing. The user should delete the instance after use.

=== tagset_converter::new_pdt_to_conll2009_converter() ===[tagset_converter_new_pdt_to_conll2009_converter]
``` static [tagset_converter* #tagset_converter] new_pdt_to_conll2009_converter();

Returns a new instance of a Czech PDT tag set to CoNLL2009 tag set converter.
The user should delete the instance after use.

CoNLL2009 tag set uses two columns for tags -- one is a POS and the other one
are additional FEATs. Because we have only one tag field, we merge these fields
together by using ``Pos=?|FEAT``, i.e., the POS is stored as a first FEAT.


== C++ Bindings API ==

Bindings for other languages than C++ are created using SWIG from the C++
bindings API, which is a slightly modified version of the native C++ API.
Main changes are replacement of [``string_piece`` #string_piece] type by native
strings and removal of methods using ``FILE``. Here is the C++ bindings API
declaration:

%!include: morphodita_bindings_api.t2t

== Java Bindings ==

%!include: morphodita_bindings_java_api.t2t

== Perl Bindings ==

%!include: morphodita_bindings_perl_api.t2t

== Python Bindings ==

%!include: morphodita_bindings_python_api.t2t
