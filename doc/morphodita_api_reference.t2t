MorphoDiTa API Reference


%!encoding: utf-8

The MorphoDiTa API is defined in header ``morphodita.h``. All API functions
reside in ``ufal::morphodita`` namespace.

++ class ufal::morphodita::tagger ++

+++ tagger::load(FILE* f) +++

```
static tagger* load(FILE* f);
```

Factory method constructor. Accepts C file pointer pointing to a file with the
model. Returns a pointer to an instance of ``ufal::morphodita::tagger``.

+++ tagger::load(const char* fname) +++

```
static tagger* load(const char* fname);
```

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of ``ufal::morphodita::tagger``.

+++ tagger::get_morpho() +++

```
virtual const morpho* get_morpho() const = 0;
```

An accessor to an instance of internal instance of morphologic dictionary.
Returns a pointer to an instance of ``ufal::morphodita::morpho`` associated
with the tagger. Do not delete the pointer, it is
owned by the tagger instance and deleted in the tagger destructor.

+++ tagger::tag(const std::vector<raw_form>& forms, std::vector<tagged_lemma>& tags) +++

```
virtual void tag(const std::vector<raw_form>& forms, std::vector<tagged_lemma>& tags) const = 0;
```

Perform morphologic analysis and subsequent disambiguation. Accepts
a ``std::vector`` of ``raw_form`` (defined in ``morphodita.h``). Fills the
second return argument (instantiated empty by the caller), ``std::vector`` of
``tagged_lemma`` (defined in ``morphodita.h``). 

++ class ufal::morphodita::morpho ++

+++ morpho::load(FILE* f) +++

```
static morpho* load(FILE* f);
```

Factory method constructor. Accepts C file pointer pointing to a file with the
model. Returns a pointer to an instance of ``ufal::morphodita::morpho``.

+++ morpho::load(const char* fname) +++

```
static morpho* load(const char* fname);
```

Factory method constructor. Accepts C string with a file name of the model.
Returns a pointer to an instance of ``ufal::morphodita::morpho``.

+++ morpho::guesser_mode +++

```
enum guesser_mode { NO_GUESSER = 0, GUESSER = 1 };
```

Public member guesser mode. Defines behavior in case of unknown words. When set
to ``GUESSER``, morpho tries to guess unknown words. When set to ``NO_GUESSER``, morpho
does not guess unknown words.

+++ morpho::analyze(const char* form, int form_len, guesser_mode guesser, std::vector<tagged_lemma>& lemmas) +++

```
virtual int analyze(const char* form, int form_len, guesser_mode guesser, std::vector<tagged_lemma>& lemmas) const = 0;
```

Perform morphologic analysis of a form. The form is given by a pointer and
length and therefore does not need to be ``'\0'`` terminated.  The guesser
parameter specifies whether a guesser can be used if the form is not found
in the dictionary. Output is assigned to the lemmas vector.

If the form is found in the dictionary, analyses are assigned to lemmas
and ``NO_GUESSER`` returned. If ``guesser == GUESSER`` and the form analyses are
found using a guesser, they are assigned to lemmas and ``GUESSER`` is
returned.  Otherwise ``<0`` is returned and lemmas are filled with one
analysis containing given form as lemma and a tag for unknown word.

+++ morpho::generate(const char* lemma, int lemma_len, const char* tag_wildcard, guesser_mode guesser, std::vector<tagged_lemma_forms>& forms) +++

```
virtual int generate(const char* lemma, int lemma_len, const char* tag_wildcard, guesser_mode guesser, std::vector<tagged_lemma_forms>& forms) const = 0;
```

Perform morphologic generation of a lemma. The lemma is given by a pointer
and length and therefore does not need to be ``'\0'`` terminated. Optionally
a tag_wildcard can be specified (or be ``NULL``) and if so, results are
filtered using this wildcard. The guesser parameter speficies whether
a guesser can be used if the lemma is not found in the dictionary. Output
is assigned to the forms vector.

Tag_wildcard can be either ``NULL`` or a wildcard applied to the results.
A ``?`` in the wildcard matches any character, ``[bytes]`` matches any of the
bytes and ``[^bytes]`` matches any byte different from the specified ones.
A ``-`` has no special meaning inside the bytes and if ``]`` is first in bytes, it
does not end the bytes group.

If the given lemma is only a raw lemma, all lemma ids with this raw lemma
are returned. Otherwise only matching lemma ids are returned, ignoring any
lemma comments. For every found lemma, matching forms are filtered using
the tag_wildcard. If at least one lemma is found in the dictionary,
``NO_GUESSER`` is returned. If ``guesser == GUESSER`` and the lemma is found by
the guesser, ``GUESSER`` is returned. Otherwise, forms are cleared and ``<0`` is
returned.
